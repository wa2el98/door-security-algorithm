#include <stdio.h>


int charToInt(char ptext)
{
	int result;

	result = ptext - 97;

	return result;
}

char intToChar(int x)
{
	char result;

	result = x + 97;

	return result;
}



void multiplyMatrices(int first[][2], int second[][2], int result[][2], int m)
{

	// Initializing elements of matrix mult to 0.
	for (int i = 0; i < m; ++i) {
		for (int j = 0; j < m; ++j) {
			result[i][j] = 0;
		}
	}

	// Multiplying first and second matrices and storing it in result
	for (int i = 0; i < m; ++i) {
		for (int j = 0; j < m; ++j) {
			for (int k = 0; k < m; ++k) {
				result[i][j] += first[i][k] * second[k][j];
			}
		}
	}
}









char* door_encryption(char ptext[20], char key[4])
{
	int m = 2;

	int ciphertextInt[20];
	char ciphertext[20];
	char ciphertextwithspaces[20];

	int x[2][2];
	int A[2][2];
	int I[2][2];
	int result1[2][2];
	int result2[2][2];
	int result3[2][2];
	int i, j, f;
	int k = 0;

	int b, c;

	int flag = 1;

	for (i = 0; i < 20; ++i)
		ciphertext[i] = '\0';






	

	char ptextwithoutspaces[20];
	int spaces[20];

	for (i = 0; i < 20; i++)
		spaces[i] = 0;

	for (i = 0, j = 0; i < 20; i++)
	{
		if (ptext[i] == 32)
		{
			spaces[i] = 1;

		}
		else
		{
			ptextwithoutspaces[j] = ptext[i];
			j++;
		}
	}









	//initialize I matrix
	for (i = 0; i < m; ++i)
		for (j = 0; j < m; ++j) {
			if (i == j)
				I[i][j] = 1;
			else
				I[i][j] = 0;
		}

	//initialize A matrix
	for (i = 0; i < m; ++i)
		for (j = 0; j < m; ++j) {
			A[i][j] = charToInt(key[k]);
			k++;
		}

	multiplyMatrices(A, A, result2, m);

	//Adding 2I to result 2
	for (i = 0; i < m; ++i)
		for (j = 0; j < m; ++j) {
			result2[i][j] = result2[i][j] + 2 * (I[i][j]);
		}

	k = 0;
	f = 0;

	while (ptextwithoutspaces[k] != '\0')
	{
		//initialize x matrix
		for (i = 0; i < m; ++i)
			for (j = 0; j < m; ++j) {
				if (ptextwithoutspaces[k] != '\0')
				{
					x[i][j] = charToInt(ptextwithoutspaces[k]);
					k++;
				}
				else
				{
					x[i][j] = 0;
				}
			}





		multiplyMatrices(x, A, result1, m);



		multiplyMatrices(result1, result2, result3, m);

		/*
		printf("\n%d\n", result3[0][0]);
		printf("\n%d\n", result3[0][1]);
		printf("\n%d\n", result3[1][0]);
		printf("\n%d\n", result3[1][1]);
		*/

		//store the final result in ciphertextInt
		for (i = 0; i < m; ++i)
			for (j = 0; j < m; ++j)
			{
				if(f < k)
				{ 
				ciphertextInt[f] = result3[i][j] % 26;
				if (ciphertextInt[f] < 0)
					ciphertextInt[f] += 26;
				ciphertext[f] = intToChar(ciphertextInt[f]);
				f++;
				}
			}

	}



	//return the spaces
	for (i = 0, j = 0; i < 20; i++)
	{
		if (spaces[i] == 1)
		{
			ciphertextwithspaces[i]=' ';

		}
		else
		{
			ciphertextwithspaces[i] = ciphertext[j];
			j++;
		}
	}



	return ciphertextwithspaces;
}


















void Inverse(int first[][2], int result[][2])
{
	int determinant = first[0][0] * first[1][1] - first[1][0] * first[0][1];


	for (int i = 0; i < 2; ++i) {
		for (int j = 0; j < 2; ++j) {
			if (i == j)
				result[i][j] = first[(i + 1) % 2][(j + 1) % 2];
			else
				result[i][j] = -first[i][j];
		}
	}

	for (int i = 0; i < 2; ++i) {
		for (int j = 0; j < 2; ++j) {
			result[i][j] = result[i][j] * determinant;
		}
	}
}










char* door_decryption(char ctext[20], char key[4])
{
	int m = 2;

	int ciphertextInt[20];
	char ciphertext[20];
	char ciphertextwithspaces[20];


	int x[2][2];
	int A[2][2];
	int I[2][2];
	//A^2 +2I
	int result1[2][2];

	//(A^2 +2I)^-1
	int result1Inverse[2][2];

	//A^-1
	int AInverse[2][2];

	//(A^2 +2I)^-1 * (A)^-1
	int result2[2][2];

	//final result
	int result3[2][2];

	int i, j, k = 0, f;

	int flag = 1, b, c;









	char ctextwithoutspaces[20];
	int spaces[20];

	for (i = 0; i < 20; i++)
		spaces[i] = 0;

	for (i = 0, j = 0; i < 20; i++)
	{
		if (ctext[i] == 32)
		{
			spaces[i] = 1;

		}
		else
		{
			ctextwithoutspaces[j] = ctext[i];
			j++;
		}
	}









	for (i = 0; i < 20; ++i)
		ciphertext[i] = '\0';


	//initialize I matrix
	for (i = 0; i < m; ++i)
		for (j = 0; j < m; ++j) {
			if (i == j)
				I[i][j] = 1;
			else
				I[i][j] = 0;
		}

	//initialize A matrix
	for (i = 0; i < m; ++i)
		for (j = 0; j < m; ++j) {
			A[i][j] = charToInt(key[k]) % 26;
			k++;
		}


	k = 0;
	f = 0;


	multiplyMatrices(A, A, result1, m);

	//Adding 2I to result1
	for (i = 0; i < m; ++i)
		for (j = 0; j < m; ++j) {
			result1[i][j] = result1[i][j] + 2 * (I[i][j]);
		}

	Inverse(result1, result1Inverse);

	Inverse(A, AInverse);

	multiplyMatrices(result1Inverse, AInverse, result2, m);

	while (ctextwithoutspaces[k] != '\0')
	{

		//initialize x matrix
		for (i = 0; i < m; ++i)
			for (j = 0; j < m; ++j) {
				if (ctextwithoutspaces[k] != '\0')
				{
					x[i][j] = charToInt(ctextwithoutspaces[k]);
					k++;
				}
				else
					x[i][j] = 0;
			}

		multiplyMatrices(x, result2, result3, m);

		//store the final result in ciphertextInt
		for (i = 0; i < m; ++i)
			for (j = 0; j < m; ++j)
			{
				if (f < k)
				{
					ciphertextInt[f] = result3[i][j] % 26;
					if (ciphertextInt[f] < 0)
						ciphertextInt[f] += 26;
					ciphertext[f] = intToChar(ciphertextInt[f]);
					f++;
				}
			}
	}



	//return the spaces
	for (i = 0, j = 0; i < 20; i++)
	{
		if (spaces[i] == 1)
		{
			ciphertextwithspaces[i] = ' ';

		}
		else
		{
			ciphertextwithspaces[i] = ciphertext[j];
			j++;
		}
	}


	return ciphertextwithspaces;
}
















void iterative(char dec[20], char key[4])
{
	printf("\n\nthe iterative attack\n");
	printf("encrypted text is: %s\n", dec);
	char* encrypted;
	int i;
	char enc[20];

	encrypted = door_encryption(dec, key);
	printf("iteration 1 : %s\n", encrypted);
	i = 2;
	strcpy(enc, encrypted);

	while (strcmp(enc, dec))
		//for(i=2;i<10;i++)
	{
		encrypted = door_encryption(enc, key);
		strcpy(enc, encrypted);
		i++;
		printf("iteration %d :  %s\n", i, encrypted);
	}


}






void main()
{
	int i = 0;
	char* encrypted;
	char ptext[20] = { "ahmad badran" };
	char key[4] = { "dlep" };

	char* decrypted;
	char enc[20];

	printf("orginal text is: %s \n", ptext);

	encrypted = door_encryption(ptext, key);

	printf("encrypted text is: %s\n", encrypted);

	strcpy(enc, encrypted);

	decrypted = door_decryption(enc, key);

	printf("decrypted text is: %s\n", decrypted);



	iterative(enc, key);


}


